@book{agile-book,
  title     = {Agile Software Development, Principles, Patterns, and Practices},
  publisher = {Pearson Education},
  year      = {2002},
  author    = {Robert C. Martin and James W. Newkirk and Robert S. Koss},
  edition   = {1},
  isbn      = {0-13-597444-5},
  address   = {New Jersey, US},
  language  = {English}
}

@misc{akhtar,
  title  = {Analysis of Architectural Patterns for Android Development},
  author = {Nayab Akhtar and Sana Ghafoor},
  year   = {2021}
}

@online{android-arch,
  author = {{Android Developers}},
  title  = {Guide to app architecture},
  year   = 2022,
  note   = {\url{https://developer.android.com/topic/architecture}}
}

@book{clean-arch-book,
  title     = {Clean Architecture: A Craftsman's Guide to Software Structure and Design},
  publisher = {Prentice Hall},
  year      = {2017},
  author    = {Robert C. Martin},
  edition   = {1},
  address   = {Boston, MA},
  language  = {English}
}

@article{coupling-and-cohesion,
  author  = {Stevens, W. P. and Myers, G. J. and Constantine, L. L.},
  journal = {IBM Systems Journal},
  title   = {Structured design},
  year    = {1974},
  volume  = {13},
  number  = {2},
  pages   = {115-139},
  doi     = {10.1147/sj.132.0115}
}

@article{cyclomatic-complexity,
  author   = {McCabe, T.J.},
  journal  = {IEEE Transactions on Software Engineering},
  title    = {A Complexity Measure},
  year     = {1976},
  volume   = {SE-2},
  number   = {4},
  pages    = {308-320},
  abstract = {This paper describes a graph-theoretic complexity measure and illustrates how it can be used to manage and control program complexity. The paper first explains how the graph-theory concepts apply and gives an intuitive explanation of the graph concepts in programming terms. The control graphs of several actual Fortran programs are then presented to illustrate the correlation between intuitive complexity and the graph-theoretic complexity. Several properties of the graph-theoretic complexity are then proved which show, for example, that complexity is independent of physical size (adding or subtracting functional statements leaves complexity unchanged) and complexity depends only on the decision structure of a program.},
  doi      = {10.1109/TSE.1976.233837},
  issn     = {1939-3520},
  month    = {Dec}
}

@online{data-binding-android,
  author = {{Android Developers}},
  title  = {Data Binding Library},
  year   = 2021,
  note   = {\url{https://developer.android.com/topic/libraries/data-binding}}
}

@online{data-binding-wikipedia,
  author = {{Wikipedia contributors}},
  title  = {Data binding},
  year   = 2022,
  note   = {\url{https://en.wikipedia.org/wiki/Data_binding}}
}

@book{ddd-book,
  title     = {Domain-Driven Design: Tackling Complexity in the Heart of Software},
  publisher = {Addison Wesley},
  year      = {2003},
  author    = {Eric Evans},
  edition   = {1},
  isbn      = {0-321-12521-5},
  address   = {Boston, MA},
  language  = {English}
}

@book{design-patterns-book,
  title     = {Design Patterns Elements of Reusable Object-Oriented Software},
  publisher = {Addison Wesley},
  year      = {2003},
  author    = {Erich Gamma and Richard Helm and Ralph Johnson and John Vlissides},
  edition   = {1},
  isbn      = {0-201-63361-2},
  address   = {Boston, MA},
  language  = {English}
}

@online{febraban-data,
  author = {FEBRABAN and Deloitte},
  title  = {Pesquisa FEBRABAN de Tecnologia Bancária},
  year   = 2021,
  note   = {\url{https://cmsarquivos.febraban.org.br/Arquivos/documentos/PDF/pesquisa-febraban-relatorio.pdf}}
}

@online{firebase,
  author = {Google},
  title  = {Firebase},
  year   = 2011,
  note   = {\url{https://firebase.google.com/}}
}

@online{flutter,
  author = {Google},
  title  = {Flutter},
  year   = 2017,
  note   = {\url{https://flutter.dev/}}
}

@book{fowler-patterns-book,
  title     = {Patterns of Enterprise Application Architecture},
  publisher = {Addison-Wesley Professional},
  year      = {2002},
  author    = {Martin Fowler},
  edition   = {1},
  address   = {Boston},
  language  = {English}
}

@online{fowler-presentation-model,
  author = {Martin Fowler},
  title  = {Presentation Model},
  year   = 2004,
  note   = {\url{https://martinfowler.com/eaaDev/PresentationModel.html}}
}

@book{fundamentals-soft-arch-book,
  title     = {Fundamentals of Software Architecture: An Engineering Approach},
  publisher = {O`Reilly Media, Inc.},
  year      = {2020},
  author    = {Mark Richards and Neal Ford},
  edition   = {1},
  address   = {California, USA},
  language  = {English}
}

@online{hexagonal-arch,
  author = {Alistair Cockburn},
  title  = {Hexagonal architecture},
  year   = 2005,
  note   = {\url{https://alistair.cockburn.us/hexagonal-architecture}}
}

@misc{humeniuk,
  author      = {Humeniuk, Vladyslav},
  institution = {Linnaeus University, Department of computer science and media technology (CM)},
  pages       = {46},
  school      = {Linnaeus University, Department of computer science and media technology (CM)},
  title       = {Android Architecture Comparison: MVP vs. VIPER},
  keywords    = {software architectures, mobile development, android, mvp, viper, architecture comparison},
  abstract    = {Android application development has been of interest since the first Android smartphone was released. Applications are constantly getting more complex as well as smartphone hardware is getting better. New ways of developing Android applications are developed with time. There is Model View Presenter architecture that is the most used for android applications now and new View InteractorPresenter Entity Router architecture that is becoming more popular. But there is no empirical data to compare these architectures to understand what architecture will fit better for developing new applications. This thesis aims to compare the MVP and the VIPER android architectures using a few important metrics like maintainability, modifiability, testability, and performance. Results will answer what architecture is better for developing different types of projects. VIPERarchitecture showed better performance results and maintenance metrics comparison shows that both architectures have advantages and disadvantages. },
  year        = {2019}
}

@article{ieee-std,
  author  = {IEEE},
  journal = {IEEE Std 610.12-1990},
  title   = {IEEE Standard Glossary of Software Engineering Terminology},
  year    = {1990},
  pages   = {1-84},
  doi     = {10.1109/IEEESTD.1990.101064}
}

@online{image-builder-design-pattern,
  author = {Refactoring.Guru},
  title  = {Builder},
  year   = 2022,
  note   = {\url{https://refactoring.guru/images/patterns/content/builder/builder-pt-br.png}}
}

@online{ios-architectures,
  author = {Bohdan Orlov},
  title  = {iOS Architecture Patterns},
  year   = 2015,
  note   = {\url{https://medium.com/ios-os-x-development/ios-architecture-patterns-ecba4c38de52}}
}

@online{it-usage-data,
  author = {Fernando de Souza Meirelles},
  title  = {Pesquisa Anual do Uso de TI},
  year   = 2022,
  note   = {\url{https://eaesp.fgv.br/producao-intelectual/pesquisa-anual-uso-ti}}
}

@inproceedings{liskov-substitution,
  author    = {Liskov, Barbara},
  title     = {Data Abstraction and Hierarchy},
  year      = {1987},
  isbn      = {0897912667},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/62138.62141},
  doi       = {10.1145/62138.62141},
  booktitle = {Addendum to the Proceedings on Object-Oriented Programming Systems, Languages and Applications (Addendum)},
  pages     = {17–34},
  numpages  = {18},
  location  = {Orlando, Florida, USA},
  series    = {OOPSLA '87}
}

@online{microfrontends-michael-geers,
  author = {Michael Geers},
  title  = {Micro Frontends},
  year   = 2021,
  note   = {\url{https://micro-frontends.org}}
}

@online{microfrontends-thoughtworks,
  author = {Thoughtworks},
  title  = {Micro frontends},
  year   = 2020,
  note   = {\url{https://www.thoughtworks.com/radar/techniques/micro-frontends}}
}

@inproceedings{mvc-paper,
  title        = {The original MVC reports},
  author       = {Trygve Reenskaug},
  year         = {1979},
  address      = {Blindern, Oslo},
  organization = {Department of Informatics, University of Oslo}
}

@online{mvvm-description,
  author = {Josh Smith},
  title  = {Patterns - WPF Apps With The Model-View-ViewModel Design Pattern},
  year   = 2009,
  note   = {\url{https://docs.microsoft.com/en-us/archive/msdn-magazine/2009/february/patterns-wpf-apps-with-the-model-view-viewmodel-design-pattern}}
}

@online{onion-arch,
  author = {Jeffrey Palermo},
  title  = {The Onion Architecture : part 1},
  year   = 2008,
  note   = {\url{https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1}}
}

@article{passive-mvc-android,
  author  = {Sokolova, Karina and Lemercier, Marc},
  year    = {2014},
  month   = {06},
  pages   = {123 - 138},
  title   = {Towards High Quality Mobile Applications: Android Passive MVC Architecture},
  volume  = {7},
  journal = {International Journal On Advances in Software 1942-2628}
}

@book{pattern-oriented-soft-arch-book,
  title     = {Pattern-Oriented Software Architecture, a System of Patterns},
  publisher = {Wiley},
  year      = {1996},
  author    = {Frank Buschmann and Regine Meunier and Hans Rohnert and Peter Sommerlad and Michael Stal},
  edition   = {1},
  address   = {West Sussex PO19 IUD. England},
  language  = {English}
}

@online{pix-statistics,
  author = {{BANCO CENTRAL DO BRASIL}},
  title  = {Estatísticas do Pix},
  year   = 2022,
  note   = {\url{https://www.bcb.gov.br/estabilidadefinanceira/estatisticaspix}}
}

@conference{quality-standards-paper,
  author    = {Gr{\o}nli, Tor-Morten and Ghinea, Gheorghita},
  booktitle = {2016 49th Hawaii International Conference on System Sciences (HICSS)},
  title     = {Meeting Quality Standards for Mobile Application Development in Businesses: A Framework for Cross-Platform Testing},
  year      = {2016},
  publisher = {IEEE},
  address   = {Koloa, HI, USA},
  pages     = {5711-5720},
  doi       = {10.1109/HICSS.2016.706}
}

@book{refactoring-book,
  title     = {Refactoring: Improving the Design of Existing Code},
  publisher = {Addison Wesley},
  year      = {2018},
  author    = {Martin Fowler and Kent Beck},
  edition   = {2},
  isbn      = {978-0134757599},
  address   = {Boston, MA},
  language  = {English}
}
 
 
@article{scenario-based,
  author  = {Kazman, R. and Abowd, G. and Bass, L. and Clements, P.},
  journal = {IEEE Software},
  title   = {Scenario-based analysis of software architecture},
  year    = {1996},
  volume  = {13},
  number  = {6},
  pages   = {47-55},
  doi     = {10.1109/52.542294}
}

@book{soft-eng-book,
  title     = {Engenharia de Software},
  publisher = {Pearson Prentice Hall},
  year      = {2011},
  author    = {Ian Sommerville},
  edition   = {9},
  isbn      = {978-85-7936-108-1},
  address   = {São Paulo, Brasil},
  language  = {Portuguese}
}

@online{viper-architecture,
  author = {Jeff Gilbert and Conrad Stoll},
  title  = {Architecting iOS Apps with VIPER},
  year   = 2014,
  note   = {\url{https://www.objc.io/issues/13-architecture/viper}}
}